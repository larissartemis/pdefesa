<div class="p-4 sm:p-8 bg-gray-100 min-h-screen">
  <div id="qr-code-editor" class="bg-white p-8 rounded-lg shadow-md w-full mx-auto">
    <div class="flex justify-between items-center mb-6">
      <h2 class="text-3xl sm:text-4xl font-bold text-gray-800">QR Code</h2>
    </div>
    
    <div class="grid grid-cols-1 lg:grid-cols-[1fr_300px] gap-8 items-start">
      <!-- Coluna de Inputs e Rádios -->
      <div>
        <div class="mb-6">
          <p class="text-gray-700 font-semibold mb-2">Escolha o tipo de QR Code:</p>
          <div class="flex flex-col sm:flex-row gap-4 mb-4">
            <label class="flex-grow flex items-center gap-2 cursor-pointer p-4 rounded-lg border-2 border-transparent hover:border-blue-500 bg-gray-50 transition duration-200" data-value="link">
              <input type="radio" name="qr-type" value="link" checked class="hidden">
              <span class="flex-grow text-center">Link</span>
            </label>
            <label class="flex-grow flex items-center gap-2 cursor-pointer p-4 rounded-lg border-2 border-transparent hover:border-blue-500 bg-gray-50 transition duration-200" data-value="dms">
              <input type="radio" name="qr-type" value="dms" class="hidden">
              <span class="flex-grow text-center">Coordenada Geográfica (DMS)</span>
            </label>
            <label class="flex-grow flex items-center gap-2 cursor-pointer p-4 rounded-lg border-2 border-transparent hover:border-blue-500 bg-gray-50 transition duration-200" data-value="decimal">
              <input type="radio" name="qr-type" value="decimal" class="hidden">
              <span class="flex-grow text-center">Coordenada Geográfica (Decimal)</span>
            </label>
          </div>
          <div id="message-box" class="mt-4 p-3 rounded-md hidden opacity-0 transition-opacity duration-1000"></div>
        </div>
        
        <div id="qr-inputs-link" class="bg-gray-100 p-6 rounded-lg mb-6">
          <div class="flex items-center justify-between">
            <label for="link-input" class="text-gray-700 font-semibold">URL:</label>
            <button class="clear-input-btn text-sm bg-gray-200 text-gray-800 font-semibold py-1 px-3 rounded-md hover:bg-gray-300 transition duration-200" data-target="link-input">Limpar</button>
          </div>
          <input type="text" id="link-input" placeholder="Ex: https://www.google.com" class="w-full p-3 mt-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200">
        </div>

        <div id="qr-inputs-dms" class="bg-gray-100 p-6 rounded-lg mb-6 hidden">
          <div class="flex items-center justify-between">
            <label for="dms-input" class="text-gray-700 font-semibold">Coordenada (DMS):</label>
            <button class="clear-input-btn text-sm bg-gray-200 text-gray-800 font-semibold py-1 px-3 rounded-md hover:bg-gray-300 transition duration-200" data-target="dms-input">Limpar</button>
          </div>
          <input type="text" id="dms-input" placeholder="Ex: 40° 42' 46'' N, 74° 0' 21'' W" class="w-full p-3 mt-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200">
          <div id="map-link-container-dms" class="mt-4 hidden text-left w-full">
            <p class="text-sm text-gray-600">Link no Google Maps:</p>
            <a id="google-maps-link-dms" href="#" target="_blank" class="text-blue-600 hover:underline break-words text-sm"></a>
            <button id="copy-link-btn-dms" class="mt-2 text-sm bg-gray-200 text-gray-800 font-semibold py-1 px-3 rounded-md hover:bg-gray-300 transition duration-200">
              Copiar Link
            </button>
          </div>
        </div>
        
        <div id="qr-inputs-decimal" class="bg-gray-100 p-6 rounded-lg mb-6 hidden">
          <div class="flex items-center justify-between">
            <label for="decimal-input" class="text-gray-700 font-semibold">Coordenada (Decimal):</label>
            <button class="clear-input-btn text-sm bg-gray-200 text-gray-800 font-semibold py-1 px-3 rounded-md hover:bg-gray-300 transition duration-200" data-target="decimal-input">Limpar</button>
          </div>
          <input type="text" id="decimal-input" placeholder="Ex: -22.9068, -43.1729" class="w-full p-3 mt-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200">
          <div id="map-link-container-decimal" class="mt-4 hidden text-left w-full">
            <p class="text-sm text-gray-600">Link no Google Maps:</p>
            <a id="google-maps-link-decimal" href="#" target="_blank" class="text-blue-600 hover:underline break-words text-sm"></a>
            <button id="copy-link-btn-decimal" class="mt-2 text-sm bg-gray-200 text-gray-800 font-semibold py-1 px-3 rounded-md hover:bg-gray-300 transition duration-200">
              Copiar Link
            </button>
          </div>
        </div>
        
        <button id="generate-qr-btn" class="w-full bg-blue-900 text-white font-bold py-3 px-6 rounded-md shadow-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition duration-200">
          Gerar QR Code
        </button>
      </div>

      <!-- Coluna do QR Code Gerado -->
      <div class="bg-gray-100 p-8 rounded-lg shadow-md flex flex-col items-center justify-center">
        <div id="qrcode" class="flex items-center justify-center w-64 h-64 border-2 border-gray-300 rounded-md bg-white relative">
          <p id="qr-placeholder-text" class="text-center text-gray-400 absolute">Seu QR Code aparecerá aqui</p>
        </div>
        <button id="download-qr-btn" class="mt-4 w-full bg-blue-900 text-white font-bold py-3 px-6 rounded-md shadow-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition duration-200 hidden">
          Baixar QR Code
        </button>
        <button id="copy-qr-btn" class="mt-2 w-full bg-gray-200 text-gray-800 font-bold py-3 px-6 rounded-md shadow-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2 transition duration-200 hidden">
          Copiar QR Code
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Biblioteca qrcode.js para gerar o QR Code -->
<script src="https://cdn.jsdelivr.net/npm/qrcodejs@1.0.0/qrcode.min.js"></script>
<!-- Tailwind CSS CDN -->
<script src="https://cdn.tailwindcss.com"></script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Referências aos elementos da UI
    const backBtn = document.getElementById('back-btn');
    const qrTypeRadios = document.querySelectorAll('input[name="qr-type"]');
    const qrLabels = document.querySelectorAll('label[data-value]');
    const qrInputsLink = document.getElementById('qr-inputs-link');
    const qrInputsDMS = document.getElementById('qr-inputs-dms');
    const qrInputsDecimal = document.getElementById('qr-inputs-decimal');
    const linkInput = document.getElementById('link-input');
    const dmsInput = document.getElementById('dms-input');
    const decimalInput = document.getElementById('decimal-input');
    const generateQrBtn = document.getElementById('generate-qr-btn');
    const messageBox = document.getElementById('message-box');
    const qrcodeContainer = document.getElementById('qrcode');
    const qrPlaceholderText = document.getElementById('qr-placeholder-text');
    const downloadQrBtn = document.getElementById('download-qr-btn');
    const copyQrBtn = document.getElementById('copy-qr-btn');

    const mapLinkContainerDMS = document.getElementById('map-link-container-dms');
    const googleMapsLinkDMS = document.getElementById('google-maps-link-dms');
    const copyLinkBtnDMS = document.getElementById('copy-link-btn-dms');

    const mapLinkContainerDecimal = document.getElementById('map-link-container-decimal');
    const googleMapsLinkDecimal = document.getElementById('google-maps-link-decimal');
    const copyLinkBtnDecimal = document.getElementById('copy-link-btn-decimal');
    
    // Inicializa o QR Code
    let qrcode = null;

    // Função para mostrar mensagens na tela com fade out
    function showMessage(message, type) {
      messageBox.textContent = message;
      messageBox.classList.remove('hidden', 'bg-red-100', 'text-red-800', 'bg-green-100', 'text-green-800', 'opacity-0');
      if (type === 'error') {
        messageBox.classList.add('bg-red-100', 'text-red-800');
      } else if (type === 'success') {
        messageBox.classList.add('bg-green-100', 'text-green-800');
      }
      messageBox.classList.remove('opacity-0');
      setTimeout(() => {
        messageBox.classList.add('opacity-0');
        setTimeout(() => messageBox.classList.add('hidden'), 1000);
      }, 3000);
    }

    // Lógica para o botão "Voltar"
    backBtn.addEventListener('click', () => {
      window.location.href = '/';
    });

    // Adiciona o "checked" inicial para o radio button e o estilo visual
    const initialRadio = document.querySelector('input[name="qr-type"][checked]');
    if (initialRadio) {
      const initialLabel = initialRadio.closest('label');
      initialLabel.classList.add('border-blue-500');
    }

    // Alterna os campos de input e a aparência visual com base no rádio selecionado
    qrLabels.forEach(label => {
      label.addEventListener('click', () => {
        // Remove a borda azul de todos os labels
        qrLabels.forEach(l => l.classList.remove('border-blue-500'));
        // Adiciona a borda azul apenas no label clicado
        label.classList.add('border-blue-500');
        
        const radio = label.querySelector('input[type="radio"]');
        radio.checked = true;

        qrInputsLink.classList.add('hidden');
        qrInputsDMS.classList.add('hidden');
        qrInputsDecimal.classList.add('hidden');
        
        switch (radio.value) {
          case 'link':
            qrInputsLink.classList.remove('hidden');
            break;
          case 'dms':
            qrInputsDMS.classList.remove('hidden');
            break;
          case 'decimal':
            qrInputsDecimal.classList.remove('hidden');
            break;
        }
      });
    });

    // Lógica para limpar os inputs
    document.querySelectorAll('.clear-input-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const targetId = btn.dataset.target;
        document.getElementById(targetId).value = '';
      });
    });

    // Botão de geração de QR Code
    generateQrBtn.addEventListener('click', () => {
      const selectedType = document.querySelector('input[name="qr-type"]:checked').value;
      let data = '';
      
      // Limpa o QR Code anterior e mostra o placeholder
      if (qrcode) {
        qrcodeContainer.innerHTML = '';
      }
      if (qrPlaceholderText) {
        qrPlaceholderText.classList.remove('hidden');
      }
      
      // Esconde os botões de download e copiar e o link do maps
      downloadQrBtn.classList.add('hidden');
      copyQrBtn.classList.add('hidden');
      mapLinkContainerDMS.classList.add('hidden');
      mapLinkContainerDecimal.classList.add('hidden');

      try {
        switch (selectedType) {
          case 'link':
            data = validateAndGetLink();
            break;
          case 'dms':
            data = validateAndGetDMSCoordinates();
            break;
          case 'decimal':
            data = validateAndGetDecimalCoordinates();
            break;
        }
        
        if (data) {
          qrcodeContainer.innerHTML = ''; // Limpa o conteúdo (incluindo o placeholder)
          qrcode = new QRCode(qrcodeContainer, {
            width: 256,
            height: 256,
            colorDark: '#000000',
            colorLight: '#ffffff',
            correctLevel: QRCode.CorrectLevel.H
          });
          qrcode.makeCode(data);

          qrPlaceholderText.classList.add('hidden');
          showMessage('QR Code gerado com sucesso!', 'success');
          downloadQrBtn.classList.remove('hidden');
          copyQrBtn.classList.remove('hidden');
          
          if (selectedType === 'dms') {
            mapLinkContainerDMS.classList.remove('hidden');
            googleMapsLinkDMS.href = data;
            googleMapsLinkDMS.textContent = data;
          } else if (selectedType === 'decimal') {
            mapLinkContainerDecimal.classList.remove('hidden');
            googleMapsLinkDecimal.href = data;
            googleMapsLinkDecimal.textContent = data;
          }
        }
      } catch (error) {
        showMessage(error.message, 'error');
        qrcodeContainer.innerHTML = '';
        downloadQrBtn.classList.add('hidden');
        copyQrBtn.classList.add('hidden');
        mapLinkContainerDMS.classList.add('hidden');
        mapLinkContainerDecimal.classList.add('hidden');
        if (qrPlaceholderText) {
            qrPlaceholderText.classList.remove('hidden');
        }
      }
    });

    // Lógica para copiar o link
    copyLinkBtnDMS.addEventListener('click', () => {
        const linkText = googleMapsLinkDMS.href;
        if (linkText) {
          navigator.clipboard.writeText(linkText).then(() => {
            showMessage('Link copiado para a área de transferência!', 'success');
          }).catch(err => {
            showMessage('Erro ao copiar o link.', 'error');
            console.error('Failed to copy text: ', err);
          });
        }
    });

    copyLinkBtnDecimal.addEventListener('click', () => {
        const linkText = googleMapsLinkDecimal.href;
        if (linkText) {
          navigator.clipboard.writeText(linkText).then(() => {
            showMessage('Link copiado para a área de transferência!', 'success');
          }).catch(err => {
            showMessage('Erro ao copiar o link.', 'error');
            console.error('Failed to copy text: ', err);
          });
        }
    });

    // Lógica para copiar o QR Code
    copyQrBtn.addEventListener('click', () => {
        const qrCanvas = qrcodeContainer.querySelector('canvas');
        if (qrCanvas) {
            qrCanvas.toBlob(blob => {
                const item = new ClipboardItem({ 'image/png': blob });
                navigator.clipboard.write([item]).then(() => {
                    showMessage('QR Code copiado para a área de transferência!', 'success');
                }).catch(err => {
                    showMessage('Erro ao copiar o QR Code.', 'error');
                    console.error('Failed to copy QR code: ', err);
                });
            });
        }
    });

    // Lógica para baixar a imagem do QR Code
    downloadQrBtn.addEventListener('click', () => {
      const qrCanvas = qrcodeContainer.querySelector('canvas');
      if (qrCanvas) {
        const link = document.createElement('a');
        link.download = 'qrcode.png';
        link.href = qrCanvas.toDataURL('image/png');
        link.click();
      }
    });

    // Validação e formatação de Link
    function validateAndGetLink() {
      const url = linkInput.value.trim();
      if (!url) {
        throw new Error('Por favor, insira um link.');
      }
      return url;
    }
    
    // Função auxiliar para verificar se a string é decimal
    function isDecimalFormat(str) {
      // Verifica se a string tem o formato "número, número"
      const parts = str.split(',');
      if (parts.length === 2 && !isNaN(parts[0].trim().replace(',', '.')) && !isNaN(parts[1].trim().replace(',', '.'))) {
        return true;
      }
      return false;
    }
    
    // Função auxiliar para verificar se a string é DMS
    function isDMSFormat(str) {
      // Verifica se a string contém graus, minutos ou segundos
      return /[°'"]/.test(str);
    }

    // Validação e conversão de DMS
    function validateAndGetDMSCoordinates() {
      const dms = dmsInput.value.trim();
      
      if (!dms) {
        throw new Error('Preencha o campo de Coordenadas (DMS).');
      }

      if (isDecimalFormat(dms)) {
          throw new Error('Atenção: Você inseriu um formato decimal. Por favor, selecione a opção "Coordenada Geográfica (Decimal)".');
      }

      let parts;
      if (dms.includes(',')) {
          parts = dms.split(',');
      } else {
          // Usa regex para encontrar o final da primeira coordenada (com N/S) e o início da segunda (com E/W/L/O)
          const match = dms.match(/(.*[NS])\s*(.*[EWOL])/i);
          if (match && match.length === 3) {
              parts = [match[1], match[2]];
          } else {
              throw new Error('Formato de coordenada DMS inválido. Use "lat, lon" ou "lat lon".');
          }
      }

      if (parts.length !== 2) {
        throw new Error('Formato de coordenada DMS inválido. Use "lat, lon".');
      }

      const latDec = parseDMS(parts[0].trim(), 'lat');
      const lonDec = parseDMS(parts[1].trim(), 'lon');

      return `https://www.google.com/maps?q=${latDec},${lonDec}`;
    }

    // Validação e conversão de Decimal
    function validateAndGetDecimalCoordinates() {
      const dec = decimalInput.value.trim();
      
      if (!dec) {
        throw new Error('Preencha o campo de Coordenadas (Decimal).');
      }
      
      if (isDMSFormat(dec)) {
          throw new Error('Atenção: Você inseriu um formato DMS. Por favor, selecione a opção "Coordenada Geográfica (DMS)".');
      }

      const parts = dec.split(',');
      if (parts.length !== 2) {
        throw new Error('Formato de coordenada decimal inválido. Use "lat, lon".');
      }

      const latDec = parts[0].trim().replace(',', '.');
      const lonDec = parts[1].trim().replace(',', '.');

      if (isNaN(latDec) || isNaN(lonDec)) {
        throw new Error('Coordenadas decimais inválidas.');
      }

      if (latDec < -90 || latDec > 90) {
        throw new Error('Latitude decimal deve ser entre -90 e 90.');
      }
      if (lonDec < -180 || lonDec > 180) {
        throw new Error('Longitude decimal deve ser entre -180 e 180.');
      }

      return `https://www.google.com/maps?q=${latDec},${lonDec}`;
    }

    // Função auxiliar para converter DMS para Decimal
    function parseDMS(dms, type) {
      // Normaliza a string para lidar com diferentes separadores e casos
      dms = dms.replace(/°/g, ' ').replace(/'/g, ' ').replace(/''/g, ' ').replace(/"/g, ' ').replace(/,/g, ' ').trim();
      
      const parts = dms.split(/\s+/);
      let direction = parts.pop().toUpperCase();
      let degrees = parseFloat(parts[0]) || 0;
      let minutes = parseFloat(parts[1]) || 0;
      let seconds = parseFloat(parts[2]) || 0;
      
      if (isNaN(degrees) || isNaN(minutes) || isNaN(seconds)) {
        throw new Error('Formato DMS inválido. Use (grau minuto segundo direção).');
      }
      
      if (degrees < 0 || minutes < 0 || seconds < 0) {
        throw new Error('Graus, minutos e segundos não podem ser negativos.');
      }
      
      if (minutes >= 60 || seconds >= 60) {
        throw new Error('Minutos e segundos devem ser menores que 60.');
      }
      
      let decimal = degrees + (minutes / 60) + (seconds / 3600);

      // Adiciona o tratamento para 'O' (Oeste) e 'L' (Leste)
      if (direction === 'O') {
        direction = 'W';
      } else if (direction === 'L') {
        direction = 'E';
      }

      // Aplica o sinal correto com base na direção
      if ((type === 'lat' && (direction === 'S' || direction === 'SOUTH')) ||
          (type === 'lon' && (direction === 'W' || direction === 'WEST'))) {
        decimal = -decimal;
      }
      
      // Valida os limites
      if (type === 'lat' && (decimal < -90 || decimal > 90)) {
        throw new Error('Latitude DMS inválida. O valor deve estar entre -90 e 90.');
      }
      if (type === 'lon' && (decimal < -180 || decimal > 180)) {
        throw new Error('Longitude DMS inválida. O valor deve estar entre -180 e 180.');
      }
      
      return decimal.toFixed(6); // Arredonda para 6 casas decimais
    }
  });
</script>
